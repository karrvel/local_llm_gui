#include "gui.h"
#include <string.h>
#include <stdio.h>
#include <gtk/gtk.h>
#include <time.h>

// Global GUI state
static gui_t gui;
static gui_config_t current_config;

// CSS for styling the chat interface to look exactly like ChatGPT
static const char *css_template = 
    "window, .main-box { background-color: #343541; }\n"
    "label { color: #ffffff; }\n"
    "entry { background-color: #40414f; color: #ffffff; border-radius: 20px; padding: 12px 45px 12px 15px; border: 1px solid #565869; caret-color: white; }\n"
    "button { background-color: transparent; border: none; }\n"
    "button.send-button { min-width: 36px; min-height: 36px; padding: 0; margin: 0; }\n"
    "button.send-button image { color: #ffffff; }\n"
    ".message-box { padding: 8px; }\n"
    ".user-message { background-color: #343541; margin: 5px 30px 5px 100px; }\n"
    ".assistant-message { background-color: #444654; margin: 5px 100px 5px 30px; }\n"
    ".message-text { color: #ffffff; padding: 12px 16px; margin: 0; }\n"
    ".header-bar { background-color: #343541; border-bottom: 1px solid #565869; padding: 10px; }\n"
    ".input-box { background-color: #343541; padding: 10px; border-top: 1px solid #565869; }\n"
    ".chat-area { background-color: #343541; }\n"
    ".scrolled-window { background-color: #343541; }\n"
    ".message-content { background-color: transparent; }\n"
    ".header-title { font-weight: bold; font-size: 16px; }\n"
    ".user-icon, .assistant-icon { min-width: 30px; min-height: 30px; margin: 5px; }\n"
    ".user-icon { background-color: #5c7aaa; }\n"
    ".assistant-icon { background-color: #10a37f; }\n"
    ".icon-label { color: #ffffff; font-weight: bold; font-size: 14px; }\n";

// Forward declarations for internal functions
static void on_send_button_clicked(GtkWidget *widget, gpointer data);
static gboolean on_key_press(GtkWidget *widget, GdkEventKey *event, gpointer data);
static void update_chat_view(void);
static void apply_css(void);
static GtkWidget* create_message_bubble(const char *text, gboolean is_user);
static char* format_timestamp(time_t timestamp);

bool gui_initialize(gui_config_t *config) {
    if (config == NULL) {
        fprintf(stderr, "Error: NULL configuration provided\n");
        return false;
    }
    
    // Store configuration
    memcpy(&current_config, config, sizeof(gui_config_t));
    
    // Initialize GTK
    gtk_init(NULL, NULL);
    
    // Create main window
    gui.window = gtk_window_new(GTK_WINDOW_TOPLEVEL);
    gtk_window_set_title(GTK_WINDOW(gui.window), "ChatGPT");
    gtk_window_set_default_size(GTK_WINDOW(gui.window), config->width, config->height);
    gtk_container_set_border_width(GTK_CONTAINER(gui.window), 0); // No border to look like ChatGPT
    g_signal_connect(gui.window, "destroy", G_CALLBACK(gtk_main_quit), NULL);
    
    // Create main vertical box for layout
    GtkWidget *main_vbox = gtk_box_new(GTK_ORIENTATION_VERTICAL, 0);
    gtk_container_add(GTK_CONTAINER(gui.window), main_vbox);
    gtk_style_context_add_class(gtk_widget_get_style_context(main_vbox), "main-box");
    
    // Create header bar at the top
    GtkWidget *header_bar = gtk_box_new(GTK_ORIENTATION_HORIZONTAL, 0);
    gtk_style_context_add_class(gtk_widget_get_style_context(header_bar), "header-bar");
    gtk_box_pack_start(GTK_BOX(main_vbox), header_bar, FALSE, FALSE, 0);
    
    // ChatGPT title with arrow
    GtkWidget *title_box = gtk_box_new(GTK_ORIENTATION_HORIZONTAL, 5);
    GtkWidget *title_label = gtk_label_new("ChatGPT");
    gtk_style_context_add_class(gtk_widget_get_style_context(title_label), "header-title");
    gtk_box_pack_start(GTK_BOX(title_box), title_label, FALSE, FALSE, 0);
    
    // Right arrow icon
    GtkWidget *arrow_icon = gtk_image_new_from_icon_name("pan-end-symbolic", GTK_ICON_SIZE_SMALL_TOOLBAR);
    gtk_box_pack_start(GTK_BOX(title_box), arrow_icon, FALSE, FALSE, 0);
    gtk_box_pack_start(GTK_BOX(header_bar), title_box, FALSE, FALSE, 5);
    
    // Create scrolled window for chat messages
    gui.scrolled_window = gtk_scrolled_window_new(NULL, NULL);
    gtk_scrolled_window_set_policy(GTK_SCROLLED_WINDOW(gui.scrolled_window),
                                  GTK_POLICY_AUTOMATIC, GTK_POLICY_AUTOMATIC);
    gtk_widget_set_vexpand(gui.scrolled_window, TRUE);
    gtk_style_context_add_class(gtk_widget_get_style_context(gui.scrolled_window), "scrolled-window");
    gtk_box_pack_start(GTK_BOX(main_vbox), gui.scrolled_window, TRUE, TRUE, 0);
    
    // Create vertical box container for chat messages
    gui.chat_box = gtk_box_new(GTK_ORIENTATION_VERTICAL, 0);
    gtk_widget_set_halign(gui.chat_box, GTK_ALIGN_FILL);
    gtk_style_context_add_class(gtk_widget_get_style_context(gui.chat_box), "chat-area");
    
    // Add the chat box to a viewport to enable scrolling
    GtkWidget *viewport = gtk_viewport_new(NULL, NULL);
    gtk_container_add(GTK_CONTAINER(viewport), gui.chat_box);
    gtk_container_add(GTK_CONTAINER(gui.scrolled_window), viewport);
    
    // Create bottom input area
    GtkWidget *input_container = gtk_box_new(GTK_ORIENTATION_VERTICAL, 0);
    gtk_style_context_add_class(gtk_widget_get_style_context(input_container), "input-box");
    gtk_box_pack_end(GTK_BOX(main_vbox), input_container, FALSE, FALSE, 0);
    
    // Create horizontal box for input area with proper padding
    GtkWidget *input_hbox = gtk_box_new(GTK_ORIENTATION_HORIZONTAL, 5);
    gtk_container_set_border_width(GTK_CONTAINER(input_hbox), 10);
    gtk_box_pack_start(GTK_BOX(input_container), input_hbox, FALSE, FALSE, 0);
    
    // Create message entry with full width and rounded corners
    gui.message_entry = gtk_entry_new();
    gtk_entry_set_placeholder_text(GTK_ENTRY(gui.message_entry), "Ask anything");
    gtk_box_pack_start(GTK_BOX(input_hbox), gui.message_entry, TRUE, TRUE, 0);
    g_signal_connect(gui.message_entry, "key-press-event", G_CALLBACK(on_key_press), NULL);
    
    // Create send button with a modern send icon
    gui.send_button = gtk_button_new();
    GtkWidget *send_icon = gtk_image_new_from_icon_name("document-send-symbolic", GTK_ICON_SIZE_BUTTON);
    gtk_button_set_image(GTK_BUTTON(gui.send_button), send_icon);
    gtk_style_context_add_class(gtk_widget_get_style_context(gui.send_button), "send-button");
    gtk_box_pack_end(GTK_BOX(input_hbox), gui.send_button, FALSE, FALSE, 0);
    g_signal_connect(gui.send_button, "clicked", G_CALLBACK(on_send_button_clicked), NULL);
    
    // Initialize message history
    gui.messages = g_array_new(FALSE, FALSE, sizeof(chat_message_t));
    g_array_set_clear_func(gui.messages, (GDestroyNotify)free);
    
    // Apply CSS styling
    apply_css();
    
    // Show all widgets
    gtk_widget_show_all(gui.window);
    
    return true;
}

void gui_run(void) {
    gtk_main();
}

void gui_cleanup(void) {
    // Free message history
    if (gui.messages) {
        for (guint i = 0; i < gui.messages->len; i++) {
            chat_message_t *msg = &g_array_index(gui.messages, chat_message_t, i);
            if (msg->text) {
                free(msg->text);
                msg->text = NULL;
            }
        }
        g_array_free(gui.messages, TRUE);
        gui.messages = NULL;
    }
}

void gui_add_message(const char *text, bool is_user) {
    if (text == NULL || strlen(text) == 0) {
        return;
    }
    
    // Create new message
    chat_message_t msg;
    msg.text = strdup(text);
    msg.is_user = is_user;
    msg.timestamp = time(NULL);
    
    // Add to message history
    g_array_append_val(gui.messages, msg);
    
    // Update chat view
    update_chat_view();
}

void gui_set_send_callback(void (*callback)(const char *message, void *user_data), void *user_data) {
    gui.send_callback = callback;
    gui.user_data = user_data;
}

void gui_show_error(const char *message) {
    GtkWidget *dialog = gtk_message_dialog_new(GTK_WINDOW(gui.window),
                                              GTK_DIALOG_DESTROY_WITH_PARENT,
                                              GTK_MESSAGE_ERROR,
                                              GTK_BUTTONS_CLOSE,
                                              "Error: %s", message);
    gtk_dialog_run(GTK_DIALOG(dialog));
    gtk_widget_destroy(dialog);
}

void gui_show_info(const char *message) {
    GtkWidget *dialog = gtk_message_dialog_new(GTK_WINDOW(gui.window),
                                              GTK_DIALOG_DESTROY_WITH_PARENT,
                                              GTK_MESSAGE_INFO,
                                              GTK_BUTTONS_CLOSE,
                                              "%s", message);
    gtk_dialog_run(GTK_DIALOG(dialog));
    gtk_widget_destroy(dialog);
}

// Internal functions

static void on_send_button_clicked(GtkWidget *widget, gpointer data) {
    const char *text = gtk_entry_get_text(GTK_ENTRY(gui.message_entry));
    
    if (text != NULL && strlen(text) > 0) {
        // Add message to chat
        gui_add_message(text, true);
        
        // Call send callback if set
        if (gui.send_callback) {
            gui.send_callback(text, gui.user_data);
        }
        
        // Clear entry
        gtk_entry_set_text(GTK_ENTRY(gui.message_entry), "");
    }
}

static gboolean on_key_press(GtkWidget *widget, GdkEventKey *event, gpointer data) {
    if (event->keyval == GDK_KEY_Return) {
        on_send_button_clicked(NULL, NULL);
        return TRUE;
    }
    return FALSE;
}

static void apply_css() {
    // Apply CSS
    GtkCssProvider *provider = gtk_css_provider_new();
    gtk_css_provider_load_from_data(provider, css_template, -1, NULL);
    gtk_style_context_add_provider_for_screen(gdk_screen_get_default(),
                                             GTK_STYLE_PROVIDER(provider),
                                             GTK_STYLE_PROVIDER_PRIORITY_APPLICATION);
    g_object_unref(provider);
}

static char* format_timestamp(time_t timestamp) {
    struct tm *timeinfo = localtime(&timestamp);
    static char buffer[20];
    strftime(buffer, sizeof(buffer), "%H:%M:%S", timeinfo);
    return buffer;
}

// Enhanced Markdown to Pango markup conversion
static char* markdown_to_pango(const char *text) {
    if (!text) return NULL;
    
    GString *result = g_string_new("");
    
    // First escape all the special characters
    GString *escaped = g_string_new("");
    const char *p = text;
    while (*p) {
        if (*p == '<') {
            g_string_append(escaped, "&lt;");
        } else if (*p == '>') {
            g_string_append(escaped, "&gt;");
        } else if (*p == '&') {
            g_string_append(escaped, "&amp;");
        } else {
            g_string_append_c(escaped, *p);
        }
        p++;
    }
    
    // Now the simpler, more direct approach to markdown conversion
    const char *text_to_process = escaped->str;
    
    // Replace headers - # Header
    GRegex *header_regex = g_regex_new("^(#+)\\s+(.+)$", G_REGEX_MULTILINE, 0, NULL);
    GMatchInfo *match_info;
    
    if (g_regex_match(header_regex, text_to_process, 0, &match_info)) {
        while (g_match_info_matches(match_info)) {
            gchar *header_level = g_match_info_fetch(match_info, 1);
            gchar *header_text = g_match_info_fetch(match_info, 2);
            
            int level = strlen(header_level);
            int font_size = 24 - ((level-1) * 2); // Decrease size with header level
            if (font_size < 14) font_size = 14;
            
            gchar *replacement = g_strdup_printf("<span weight=\"bold\" size=\"%dpt\">%s</span>", 
                                             font_size, header_text);
            
            // Do the replacement
            gchar *start, *end;
            g_match_info_fetch_pos(match_info, 0, (gint*)&start, (gint*)&end);
            g_string_replace(escaped, g_match_info_get_string(match_info), replacement, TRUE);
            
            g_free(header_level);
            g_free(header_text);
            g_free(replacement);
            
            g_match_info_next(match_info, NULL);
        }
    }
    g_match_info_free(match_info);
    g_regex_unref(header_regex);
    
    // Replace bold - **text** or __text__
    GRegex *bold_regex = g_regex_new("(\\*\\*|__)(.*?)\\1", 0, 0, NULL);
    gchar *bold_replaced = g_regex_replace(bold_regex, 
                                         escaped->str, -1, 0, 
                                         "<b>\\2</b>", 0, NULL);
    g_string_assign(escaped, bold_replaced);
    g_free(bold_replaced);
    g_regex_unref(bold_regex);

    // Replace italic - *text* or _text_
    GRegex *italic_regex = g_regex_new("([*_])([^*_]+)\\1", 0, 0, NULL);
    gchar *italic_replaced = g_regex_replace(italic_regex,
                                           escaped->str, -1, 0,
                                           "<i>\\2</i>", 0, NULL);
    g_string_assign(escaped, italic_replaced);
    g_free(italic_replaced);
    g_regex_unref(italic_regex);
    
    // Replace strikethrough - ~~text~~
    GRegex *strike_regex = g_regex_new("~~(.*?)~~", 0, 0, NULL);
    gchar *strike_replaced = g_regex_replace(strike_regex,
                                          escaped->str, -1, 0,
                                          "<s>\\1</s>", 0, NULL);
    g_string_assign(escaped, strike_replaced);
    g_free(strike_replaced);
    g_regex_unref(strike_regex);
    
    // Replace inline code - `code`
    GRegex *code_regex = g_regex_new("`([^`]+)`", 0, 0, NULL);
    gchar *code_replaced = g_regex_replace(code_regex,
                                        escaped->str, -1, 0,
                                        "<span background=\"#2d2d2d\" foreground=\"#e0e0e0\" font_family=\"monospace\">\\1</span>", 0, NULL);
    g_string_assign(escaped, code_replaced);
    g_free(code_replaced);
    g_regex_unref(code_regex);
    
    // Replace triple backtick code blocks
    GRegex *code_block_regex = g_regex_new("```([\\s\\S]*?)```", 0, 0, NULL);
    gchar *code_block_replaced = g_regex_replace(code_block_regex,
                                              escaped->str, -1, 0,
                                              "<span background=\"#1e1e1e\" foreground=\"#d4d4d4\" font_family=\"monospace\">\\1</span>", 0, NULL);
    g_string_assign(escaped, code_block_replaced);
    g_free(code_block_replaced);
    g_regex_unref(code_block_regex);
    
    // Replace links - [text](url)
    GRegex *link_regex = g_regex_new("\\[(.*?)\\]\\((.*?)\\)", 0, 0, NULL);
    gchar *link_replaced = g_regex_replace(link_regex,
                                        escaped->str, -1, 0,
                                        "<span foreground=\"#58a6ff\"><u>\\1</u></span>", 0, NULL);
    g_string_assign(escaped, link_replaced);
    g_free(link_replaced);
    g_regex_unref(link_regex);
    
    // Replace list items - * item 
    GRegex *list_regex = g_regex_new("^[*-+]\\s+(.*?)$", G_REGEX_MULTILINE, 0, NULL);
    gchar *list_replaced = g_regex_replace(list_regex,
                                        escaped->str, -1, 0,
                                        "• \\1", 0, NULL);
    g_string_assign(escaped, list_replaced);
    g_free(list_replaced);
    g_regex_unref(list_regex);
    
    // Replace blockquotes - > text
    GRegex *quote_regex = g_regex_new("^>\\s+(.*?)$", G_REGEX_MULTILINE, 0, NULL);
    gchar *quote_replaced = g_regex_replace(quote_regex,
                                         escaped->str, -1, 0,
                                         "<span foreground=\"#aaaaaa\" style=\"italic\">\\1</span>", 0, NULL);
    g_string_assign(escaped, quote_replaced);
    g_free(quote_replaced);
    g_regex_unref(quote_regex);
    
    // Line breaks
    gchar *result_str = g_regex_replace_literal(g_regex_new("\n", 0, 0, NULL),
                                          escaped->str, -1, 0, "\n", 0, NULL);
    
    // Transfer the final result
    g_string_assign(result, result_str);
    g_free(result_str);
    
    // Clean up
    g_string_free(escaped, TRUE);
    
    return g_string_free(result, FALSE);
}

// Process inline markdown elements: bold, italic, code, strikethrough, links
static char* process_inline_markdown(const char *text, size_t len) {
    if (!text || len == 0) return g_strdup("");
    
    GString *result = g_string_new("");
    const char *end = text + len;
    const char *p = text;
    
    while (p < end) {
        // Bold: **text** or __text__
        if (p + 1 < end && ((p[0] == '*' && p[1] == '*') || (p[0] == '_' && p[1] == '_'))) {
            const char *content_start = p + 2;
            const char *content_end = NULL;
            
            // Find the closing marker
            if (p[0] == '*') {
                content_end = strstr(content_start, "**");
            } else {
                content_end = strstr(content_start, "__");
            }
            
            if (content_end && content_end < end) {
                // Process the content between markers
                size_t content_len = content_end - content_start;
                char *bold_content = g_strndup(content_start, content_len);
                
                // Add the formatted content
                g_string_append(result, "<b>");
                g_string_append(result, bold_content);
                g_string_append(result, "</b>");
                
                g_free(bold_content);
                p = content_end + 2; // Skip closing marker
            } else {
                // No closing marker found, just add the characters
                g_string_append_c(result, *p++);
            }
        }
        // Italic: *text* or _text_
        else if ((p[0] == '*' || p[0] == '_') && 
                 !(p + 1 < end && p[1] == p[0])) { // Not part of bold marker
            char marker = p[0];
            const char *content_start = p + 1;
            const char *content_end = NULL;
            
            // Find the closing marker
            for (const char *s = content_start; s < end; s++) {
                if (*s == marker && (s == end - 1 || s[1] != marker)) {
                    content_end = s;
                    break;
                }
            }
            
            if (content_end && content_end < end) {
                // Process the content between markers
                size_t content_len = content_end - content_start;
                char *italic_content = g_strndup(content_start, content_len);
                
        }
    }
    
    return g_string_free(result, FALSE);
}

static GtkWidget* create_message_bubble(const char *text, gboolean is_user) {
    // Create a container for the entire message row
    GtkWidget *message_row = gtk_box_new(GTK_ORIENTATION_HORIZONTAL, 0);
    
    // Create the message container with proper styling based on sender
    GtkWidget *message_box = gtk_box_new(GTK_ORIENTATION_HORIZONTAL, 0);
    gtk_widget_set_hexpand(message_box, TRUE);
    
    // Create container for the icon
    GtkWidget *icon_container = gtk_box_new(GTK_ORIENTATION_VERTICAL, 0);
    GtkWidget *icon_box = gtk_box_new(GTK_ORIENTATION_VERTICAL, 0);
    gtk_widget_set_size_request(icon_box, 30, 30);
    
    // Set proper border radius in code instead of CSS to avoid GTK warnings
    GtkCssProvider *provider = gtk_css_provider_new();
    
    if (is_user) {
        // User message styling - right aligned, with user icon
        gtk_widget_set_halign(message_box, GTK_ALIGN_END);
        gtk_style_context_add_class(gtk_widget_get_style_context(message_box), "user-message");
        gtk_style_context_add_class(gtk_widget_get_style_context(icon_box), "user-icon");
        
        // Custom CSS for user message bubble shape
        gtk_css_provider_load_from_data(provider, 
            ".user-message { border-radius: 18px 0px 18px 18px; }", -1, NULL);
        gtk_style_context_add_provider(gtk_widget_get_style_context(message_box),
                                     GTK_STYLE_PROVIDER(provider),
                                     GTK_STYLE_PROVIDER_PRIORITY_APPLICATION);
                                     
        // Round the icon box
        GtkCssProvider *icon_provider = gtk_css_provider_new();
        gtk_css_provider_load_from_data(icon_provider, 
            ".user-icon { border-radius: 6px; }", -1, NULL);
        gtk_style_context_add_provider(gtk_widget_get_style_context(icon_box),
                                    GTK_STYLE_PROVIDER(icon_provider),
                                    GTK_STYLE_PROVIDER_PRIORITY_APPLICATION);
        g_object_unref(icon_provider);
        
        // Put icon at the right side
        gtk_box_pack_end(GTK_BOX(message_row), icon_container, FALSE, FALSE, 5);
        gtk_box_pack_start(GTK_BOX(icon_container), icon_box, FALSE, FALSE, 0);
        
        // Center the icon 'U' vertically
        GtkWidget *icon_label = gtk_label_new("U");
        gtk_style_context_add_class(gtk_widget_get_style_context(icon_label), "icon-label");
        gtk_container_add(GTK_CONTAINER(icon_box), icon_label);
    } else {
        // Assistant message styling - left aligned, with assistant icon
        gtk_widget_set_halign(message_box, GTK_ALIGN_START);
        gtk_style_context_add_class(gtk_widget_get_style_context(message_box), "assistant-message");
        gtk_style_context_add_class(gtk_widget_get_style_context(icon_box), "assistant-icon");
        
        // Custom CSS for assistant message bubble shape
        gtk_css_provider_load_from_data(provider, 
            ".assistant-message { border-radius: 0px 18px 18px 18px; }", -1, NULL);
        gtk_style_context_add_provider(gtk_widget_get_style_context(message_box),
                                     GTK_STYLE_PROVIDER(provider),
                                     GTK_STYLE_PROVIDER_PRIORITY_APPLICATION);
                                     
        // Round the icon box
        GtkCssProvider *icon_provider = gtk_css_provider_new();
        gtk_css_provider_load_from_data(icon_provider, 
            ".assistant-icon { border-radius: 6px; }", -1, NULL);
        gtk_style_context_add_provider(gtk_widget_get_style_context(icon_box),
                                    GTK_STYLE_PROVIDER(icon_provider),
                                    GTK_STYLE_PROVIDER_PRIORITY_APPLICATION);
        g_object_unref(icon_provider);
        
        // Put icon at the left side
        gtk_box_pack_start(GTK_BOX(message_row), icon_container, FALSE, FALSE, 5);
        gtk_box_pack_start(GTK_BOX(icon_container), icon_box, FALSE, FALSE, 0);
        
        // Center the icon 'A' vertically
        GtkWidget *icon_label = gtk_label_new("A");
        gtk_style_context_add_class(gtk_widget_get_style_context(icon_label), "icon-label");
        gtk_container_add(GTK_CONTAINER(icon_box), icon_label);
    }
    
    // Clean up the provider
    g_object_unref(provider);
    
    // Add the main message container to the row
    if (is_user) {
        gtk_box_pack_end(GTK_BOX(message_row), message_box, TRUE, TRUE, 0);
    } else {
        gtk_box_pack_start(GTK_BOX(message_row), message_box, TRUE, TRUE, 0);
    }
    
    // Convert Markdown to Pango markup
    char *markup_text = markdown_to_pango(text);
    
    // Create and style the message text with Markdown support
    GtkWidget *message_label = gtk_label_new(NULL);
    
    // Safely set markup and handle errors
    GError *error = NULL;
    if (!pango_parse_markup(markup_text, -1, 0, NULL, NULL, NULL, &error)) {
        // If there's a markup error, fall back to plain text
        g_warning("Markup parsing error: %s\nFalling back to plain text", error->message);
        g_error_free(error);
        gtk_label_set_text(GTK_LABEL(message_label), text);
    } else {
        // Markup is valid, set it
        gtk_label_set_markup(GTK_LABEL(message_label), markup_text);
    }
    
    gtk_label_set_line_wrap(GTK_LABEL(message_label), TRUE);
    gtk_label_set_line_wrap_mode(GTK_LABEL(message_label), PANGO_WRAP_WORD_CHAR);
    gtk_widget_set_halign(message_label, GTK_ALIGN_FILL);
    gtk_widget_set_size_request(message_label, 100, -1); // Minimum width, helps with wrapping
    gtk_style_context_add_class(gtk_widget_get_style_context(message_label), "message-text");
    gtk_container_add(GTK_CONTAINER(message_box), message_label);
    
    // Free the markup text
    g_free(markup_text);
    
    gtk_widget_show_all(message_row);
    return message_row;
}

static void update_chat_view() {
    // Remove all existing messages from the chat box
    GList *children = gtk_container_get_children(GTK_CONTAINER(gui.chat_box));
    for (GList *iter = children; iter != NULL; iter = g_list_next(iter)) {
        gtk_widget_destroy(GTK_WIDGET(iter->data));
    }
    g_list_free(children);
    
    // Add a small spacing widget at the top for better appearance
    GtkWidget *top_spacing = gtk_box_new(GTK_ORIENTATION_VERTICAL, 0);
    gtk_widget_set_size_request(top_spacing, -1, 10);
    gtk_box_pack_start(GTK_BOX(gui.chat_box), top_spacing, FALSE, FALSE, 0);
    
    // Add all messages to the chat box
    for (guint i = 0; i < gui.messages->len; i++) {
        chat_message_t *msg = &g_array_index(gui.messages, chat_message_t, i);
        
        // Create a message bubble and add it to the chat box
        GtkWidget *bubble = create_message_bubble(msg->text, msg->is_user);
        gtk_box_pack_start(GTK_BOX(gui.chat_box), bubble, FALSE, FALSE, 5);
    }
    
    // Add a small spacing widget at the bottom for better appearance
    GtkWidget *bottom_spacing = gtk_box_new(GTK_ORIENTATION_VERTICAL, 0);
    gtk_widget_set_size_request(bottom_spacing, -1, 10);
    gtk_box_pack_start(GTK_BOX(gui.chat_box), bottom_spacing, FALSE, FALSE, 0);
    
    // Scroll to the bottom to show the latest messages
    GtkAdjustment *adj = gtk_scrolled_window_get_vadjustment(GTK_SCROLLED_WINDOW(gui.scrolled_window));
    gtk_adjustment_set_value(adj, gtk_adjustment_get_upper(adj));
    
        // Note: Already scrolled to bottom above
}
